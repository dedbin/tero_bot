from funcs import *

bot = telebot.TeleBot(token=token)
db = {}


def get_goroscope(message):
    '''
    api call to get goroscope. send message to user
    :param message:
    :return:
    '''
    try:
        s = get_zodiac_sign(message.text)
        r = requests.post(f'https://ohmanda.com/api/horoscope/{s}')
        result = translate_text(r.json()['horoscope'])
        bot.send_message(message.chat.id, result)

    except Exception as ex:
        bot.send_message(message.chat.id, '—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–æ—Ä—å–∫–∏')
        print(ex)


@bot.message_handler(commands=['start'])
def start(message):
    '''
    function that handle comand /start
    :param message:
    :return:
    '''
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–∞—Ä–∫–∞–Ω –¥–Ω—èü™ê')
    item2 = types.KeyboardButton('—á–∏—Å–ª–æ –¥–Ω—èü™∑')
    item3 = types.KeyboardButton('—Ü–≤–µ—Ç –¥–Ω—èüßöüèª‚Äç‚ôÇÔ∏è')
    item4 = types.KeyboardButton('—Ä–∞—Å–∫–ª–∞–¥ü¶ã')
    item5 = types.KeyboardButton('–≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—èüí´')
    item6 = types.KeyboardButton('–¥—Ä—É–≥–æ–µ...')

    markup.add(item1, item2, item3, item4, item5, item6)
    text = '‚ú®–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {0.first_name}!‚ú®'
    bot.send_message(message.chat.id, text.format(message.from_user), reply_markup=markup)


def process_rasclad(message):
    '''
    a function for creating a tarot layout. the function uses the call to openair api. an api key is required
    :param message:
    :return:
    '''
    question = message.text
    temp_daycard, temp_daycard2, temp_daycard3 = random.sample(range(0, 21), 3)
    path = r'C:\Users\red1c\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\taro_bot-master\cards\card'
    with open(path + str(temp_daycard) + '.jpeg',
              'rb') as img:
        bot.send_photo(message.chat.id, img, caption=card_desc[temp_daycard])
    with open(path + str(temp_daycard2) + '.jpeg',
              'rb') as img2:
        bot.send_photo(message.chat.id, img2, caption=card_desc[temp_daycard2])
    with open(path + str(temp_daycard3) + '.jpeg',
              'rb') as img3:
        bot.send_photo(message.chat.id, img3, caption=card_desc[temp_daycard3])
    bot.send_message(message.chat.id, get_tarot_reading(question=f'–≤–æ–ø—Ä–æ—Å: {question} –Ω–∞–ø–∏—à–∏ —Ä–∞—Å–∫–ª–∞–¥ '
                                                                 f' –ø–æ –∫–∞—Ä—Ç–∞–º –∏ –≤–æ–ø—Ä–æ—Å—É',
                                                        cards=f'–ø–µ—Ä–∞—è –≤—ã–ø–∞–≤—à–∞—è –∫–∞—Ä—Ç–∞: {card_desc[temp_daycard]}\
                                                         –≤—Ç–æ—Ä–∞—è –≤—ã–ø–∞–≤—à–∞—è –∫–∞—Ä—Ç–∞: {card_desc[temp_daycard2]} \
                                                         —Ç—Ä–µ—Ç—å—è –≤—ã–ø–∞–≤—à–∞—è –∫–∞—Ä—Ç–∞: {card_desc[temp_daycard3]}'))


@bot.message_handler(content_types=['text'])
def bot_message(message):
    '''
    function that handle text messages
    :param message:
    :return:
    '''
    try:
        if message.chat.type == 'private':
            if not message.chat.id in db:
                db[message.chat.id] = {'temp_daynum': None,
                                       'temp_daycard': None,
                                       'temp_color': None}
            if message.text == '—á–∏—Å–ª–æ –¥–Ω—èü™∑':
                if not db[message.chat.id]['temp_daynum'] is None:
                    bot.send_message(message.chat.id, '–≤–∞—à–µ —á–∏—Å–ª–æ –¥–Ω—è: ' + str(db[message.chat.id]['temp_daynum']))
                    print('—á–∏—Å–ª–æ –¥–Ω—è –Ω–µ none')
                else:
                    temp_daynum = random.randint(1, 77)
                    db[message.chat.id]['temp_daynum'] = temp_daynum
                    bot.send_message(message.chat.id, '–≤–∞—à–µ —á–∏—Å–ª–æ –¥–Ω—è: ' + str(temp_daynum))
            elif message.text == '–∞—Ä–∫–∞–Ω –¥–Ω—èü™ê':
                if not db[message.chat.id]['temp_daycard'] is None:
                    temp_daycard = db[message.chat.id]['temp_daycard']
                    text_for_openai = db[message.chat.id]["text_for_openai"]
                    print('–∞—Ä–∫–∞–Ω –¥–Ω—è –Ω–µ None')
                else:
                    temp_daycard = random.randint(0, 20)
                    db[message.chat.id]['temp_daycard'] = temp_daycard
                    text_for_openai = get_tarot_reading(question='–Ω–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∞—Ä–∫–∞–Ω–∞ –¥–Ω—è –ø–æ –∫–∞—Ä—Ç–µ',
                                                cards=card_desc[temp_daycard])
                    db[message.chat.id]["text_for_openai"] = text_for_openai
                bot.send_message(message.chat.id, '–≤–∞—à –∞—Ä–∫–∞–Ω –¥–Ω—è: ' + str(temp_daycard))
                db[message.chat.id]['temp_daycard'] = temp_daycard
                bot.send_message(message.chat.id, '–æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∞—Ä–∫–∞–Ω–∞ –¥–Ω—è: \n')
                img = open(
                    path + str(temp_daycard) + '.jpeg', 'rb'
                )
                bot.send_photo(message.chat.id, img,)
                bot.send_message(message.chat.id, text_for_openai)
            elif message.text[:8] == '—Ü–≤–µ—Ç –¥–Ω—è':
                if not db[message.chat.id]['temp_color'] is None:
                    bot.send_message(message.chat.id, '–≤–∞—à —Ü–≤–µ—Ç –¥–Ω—è: ' + str(db[message.chat.id]['temp_color']))
                else:
                    temp_color = random.choice(colors_array)
                    db[message.chat.id]['temp_color'] = temp_color
                    bot.send_message(message.chat.id, '–≤–∞—à —Ü–≤–µ—Ç –¥–Ω—è: ' + str(temp_color))
            elif message.text == '–≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—èüí´':
                bot.send_message(message.chat.id, '–∫–æ–≥–¥–∞ –≤—ã —Ä–æ–¥–∏–ª–∏—Å—å?\n –æ—Ç–ø—Ä–∞–≤–ª—è–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD:MM:YYYY')
                bot.register_next_step_handler(message, get_goroscope)
            elif message.text == '–¥—Ä—É–≥–æ–µ...':
                bot.send_message(message.chat.id,
                                 '—è –Ω–∞—á–∏–Ω–∞—é—â–∏–π –º–∞–≥, –ø–æ—ç—Ç–æ–º—É –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∂—É –ø–æ–∑–∂–µ...\n–Ω–∞–∂–º–∏—Ç–µ /start –∏ '
                                 '–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
            elif message.text == '—Ä–∞—Å–∫–ª–∞–¥ü¶ã':
                bot.send_message(message.chat.id,
                                 '–∫–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å –≤ –∫–æ—Å–º–æ—Å, –≤–æ –≤—Å–µ–ª–µ–Ω–Ω—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?')
                bot.register_next_step_handler(message, process_rasclad)
            else:
                bot.send_message(message.chat.id,
                                 '–ø—Ä–æ–≤–æ–¥—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —Å –º–∞–≥–∏–µ–π, —è –ø–µ—Ä–µ—Å—Ç–∞–ª –≤–∞—Å –ø–æ–Ω–∏–º–∞—Ç—å,\n–Ω–∞–∂–º–∏—Ç–µ /start –∏ '
                                 '–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')

    except Exception as ex:
        print(ex)


bot.polling(none_stop=True)
